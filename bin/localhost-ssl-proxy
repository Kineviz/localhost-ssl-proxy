#!/usr/bin/env node

"use strict";

const fs = require("fs");
const httpProxy = require("http-proxy");
const chalk = require("chalk");
const devcert = require("devcert");

const { exists, absolutePath, program } = require("../lib/commandline");

program.parse(process.argv);

const opts = program.opts();
if (opts.config && exists(opts.config)) {
  opts.config = fs.readFileSync(absolutePath(opts.config), "utf8");
} else {
  delete opts.config;
}

const enableCors = function (req, res) {
  if (req.headers["access-control-request-method"]) {
    res.setHeader(
      "access-control-allow-methods",
      req.headers["access-control-request-method"]
    );
  }

  if (req.headers["access-control-request-headers"]) {
    res.setHeader(
      "access-control-allow-headers",
      req.headers["access-control-request-headers"]
    );
  }

  if (req.headers.origin) {
    res.setHeader("access-control-allow-origin", req.headers.origin);
  } else {
    res.setHeader("access-control-allow-origin", "*");
  }

  res.setHeader("access-control-allow-credentials", "true");
};

function getBool(val) {
  if (String(val).toLowerCase() === "true") {
    return true;
  }
  if (String(val).toLowerCase() === "false") {
    return false;
  }
  return val;
}

function getOption(val) {
  let tmpVal = typeof(val) ==='string' ?  val.trim() : val;
  if ((/^=/ig).test(tmpVal)) {
    return tmpVal.replace(/^=/ig, "");
  }
  return tmpVal;
}

const config = opts.config || { "localhost-ssl-proxy": opts };
Object.keys(config).forEach(function (name) {
  const options = config[name];
  const hostname = getOption(options.hostname || opts.hostname);
  const port = Number(getOption(options.port || opts.port));
  const targetPort = Number(getOption(options.targetPort || opts.targetPort));
  let useSSL = getOption(options.useSSL !== undefined ? options.useSSL : opts.useSSL);
  useSSL = getBool(useSSL);

  let useCORS = getOption(options.useCORS !== undefined ? options.useCORS : opts.useCORS);
  useCORS = getBool(useCORS);

  let sessionName =  getOption(options.sessionName || opts.sessionName);

  const proxyConfig = {
    xfwd: true,
    ws: true,
    target: {
      host: hostname,
      port: port,
    },
    //custom options
    sessionName,
    useSSL,
    useCORS,
    name
  };

  if (useCORS) {
    //remove cookie domain and path
    proxyConfig.cookieDomainRewrite = {
      "*": "",
    };
    proxyConfig.cookiePathRewrite = {
      "*": "",
    };
    // proxyConfig.headers = {

    // }
  }

  const createProxyServer = (serverOptions) => {
    const proxy = new httpProxy.createProxyServer(serverOptions);

    proxy.on("error", function (e) {
      console.error(
        chalk.red(
          `Request failed to ${serverOptions.target.host}:${
            serverOptions.target.port
          } : ${chalk.bold(e.code)}`
        )
      );
    });
    //set header for CORS
    let proxyCookiesMap ={};
    proxy.on("proxyRes", function (proxyRes, req, res) {
      serverOptions.useCORS && enableCors(req, res);
      const sc = proxyRes.headers["set-cookie"] || [];
      const cookiesRaw = !serverOptions.sessionName ? sc : sc.filter((s) => s.startsWith(serverOptions.sessionName));
      if (cookiesRaw.length > 0) {
        cookiesRaw.forEach((cookie) => {
          const cookieName = cookie.split(";")[0].split("=")[0];
          proxyCookiesMap[cookieName] = cookie;
        })
       }
    });

    proxy.on("proxyReq", function (proxyReq, req, res, options) {
      if (Object.keys(proxyCookiesMap).length > 0) {
          proxyReq.setHeader("Cookie", Object.values(proxyCookiesMap));
      }
    });

    const handleProxyWeb = function (req, res) {
      if (req.method === "OPTIONS") {
        serverOptions.useCORS && enableCors(req, res);
        res.writeHead(200);
        res.end();
        return;
      }
      proxy.web(req, res);
    };

    let proxyServer = null;
    if (proxyConfig.ssl) {
      proxyServer = require("https").createServer(
        proxyConfig.ssl,
        handleProxyWeb
      );
    } else {
      proxyServer = require("http").createServer(handleProxyWeb);
    }

    proxyServer.on("upgrade", function (req, socket, head) {
      proxy.ws(req, socket, head);
    });

    proxyServer.listen(targetPort);

    const targetProtocol =  serverOptions.ssl ? "https" : "http";
    const isCors = serverOptions.useCORS ? "enable CORS" :"disable CORS";

    console.log(chalk.green(`Started ${chalk.bold(serverOptions.name)} (${isCors})`));
    console.log(chalk.yellow(`http://${hostname}:${port} â†’ ${targetProtocol}://localhost:${targetPort}`));

    console.log(chalk.red("\nHit CTRL-C to stop the proxy server \n"));
  };

  if (useSSL) {
    devcert.certificateFor(["localhost"]).then(
      (ssl) => {
        proxyConfig.ssl = ssl;
        createProxyServer(proxyConfig);
      },
      (err) => {
        createProxyServer(proxyConfig);
      }
    );
  } else {
    createProxyServer(proxyConfig);
  }
});
